@model Tour.Admin.Models.TicketViewModel
@{
    Layout = null;
}
<style>
    .error-valid {
        color: red;
    }
</style>
<div id="MenuModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("_Create", "Ticket", FormMethod.Post, new { id = "frmCreate" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(m => m.Id)
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label>Customer<span style="color:red">*</span></label>
                                @Html.TextBoxFor(m => m.userId, new { @class = "form-control", @placeholder = "Customer" })
                                @Html.ValidationMessageFor(m => m.userId)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label>Chuyến bay<span style="color:red">*</span></label>
                                @Html.DropDownListFor(m => m.flightId, new SelectList(ViewBag.listFlight, "Id", "name"), "---Chuyến bay---", new { @class = "form-control", onchange = "update()" })
                                @Html.ValidationMessageFor(m => m.flightId)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label>Loại vé<span style="color:red">*</span></label>
                                @Html.DropDownListFor(m => m.TTicketId, new SelectList(ViewBag.ListTTicket, "Id", "type"), "---Loại vé---", new { @class = "form-control", onchange = "update()" })
                                @Html.ValidationMessageFor(m => m.TTicketId)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Số lượng</label>
                                @Html.TextBoxFor(m => m.quantity, new { @class = "form-control", @placeholder = "Số lượng", onchange = "update()" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Giá</label>
                                @Html.TextBoxFor(m => m.price, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="btnSubmit" class="btn btn-success btn-sm float-sm-right disableBtnSave"><span class="fa fa-save"></span>Lưu</button>
                        <button type="button" class="btn btn-danger btn btn-sm float-sm-right btn-popup-cancel" id="btnClose" style="margin-right:5px" data-dismiss="modal"><span class="fa fa-times"></span>Thoát</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<script language="javascript">
    $('#frmCreate').validate({
        rules: {
            "userId": {
                required: true
            },
            "flightId": {
                required: true
            },
            "TTicketId": {
                required: true
            },
        },
        messages: {
            "userId": "Vui lòng không để trống",
            "TTicketId": "Vui lòng không để trống",
            "flightId": "Vui lòng không để trống",
        },
        errorPlacement: function (error, element) {
            error.addClass('error-valid');
            error.insertAfter(element);
            if (element.attr("name") == "") {
                error.insertAfter("#");
            }
        }
    })

    function update() {
        var select = document.getElementById('TTicketId');
        var option = select.options[select.selectedIndex];

        var select1 = document.getElementById('flightId');
        var option1 = select1.options[select1.selectedIndex];

        var objf = @Html.Raw(Json.Serialize(ViewBag.listFlight))
        var found = objf.find(e => e.Id == option1.value)
        console.log(found)
        var tigia = found.tigia

        var obj = @Html.Raw(Json.Serialize(ViewBag.ListTTicket))
        var type = obj.find(e => e.Id == option.value)
        console.log(type)

        var q = document.getElementById('quantity').value
        console.info(q)

        document.getElementById('price').value = type.price * tigia * q
    }

    update();

</script>